Overzicht van aanpassingen:


* in het algemeen: door invoeren van ui-router -> overal "ui-view" ipv "ng-view" , $state dependency in dashCtrl en homeCtrl;
 e.g. $state.go('dashboard.library') (default kom je in library terecht na inloggen) ipv $location.path('/dashboard');
 je kan nog steeds $location gebruiken om te scrollen e.d.

* index.html
        - <meta charset="UTF-8">
        - enkele nieuwe scripts ingeladen, plus dev-controllers in comment block


* main.js : invoering van ui-router, state dashboard.network heeft een aparte controller = GraphCtrl

* omdat ik user card voor navigatie heb gebruikt: aanpassingen in userCard.html en bijhorende aanpassingen in user.js
-> gemakkelijk opniew te vervangen door voorgaande code, maar je kan in userCard.html wel afleiden hoe de navigatie met die states werkt

* dahshboard.html aangepast om nested views te injecteren; afzonderlijke dash-library.html en dash-network.html views aangemaakt


 * nieuwe service, directive en controller: networkService + graphDirective + GraphCtrl
 werkt als volgt
 - ctrl is met service verbonden in de vorm van een promise (getData) om de data te laden
 - wanneer GUI in state dashboard.network komt, wordt eerst de spinner getoond, de ctrl resolved de promise (i.e. laadt de data)
 - bij antwoord verdwijnt de spinner; cfr. $scope.graphDataLoading = false;
 - indien succes: directive wordt verwittigd door broadcast en visualisatie wordt weergegeven
 - indien failed: toast + directive wordt verwittigd en er wordt een teskt weergegeven ipv de graph (kan veranderd worden in een replacement graph)
